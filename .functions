#!/usr/bin/env bash

# Create a new directory and enter it
function mkcd() {
    mkdir -p "$@" && cd "$_";
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
    cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
    local tmpFile="${@%/}.tar";
    tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

    size=$(
        stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
        stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
    );

    local cmd="";
    if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
        # the .tar file is smaller than 50 MB and Zopfli is available; use it
        cmd="zopfli";
    else
        if hash pigz 2> /dev/null; then
            cmd="pigz";
        else
            cmd="gzip";
        fi;
    fi;

    echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…";
    "${cmd}" -v "${tmpFile}" || return 1;
    [ -f "${tmpFile}" ] && rm "${tmpFile}";

    zippedSize=$(
        stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
        stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
    );

    echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

# Determine size of a file or total size of a directory
function fs() {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh;
    else
        local arg=-sh;
    fi
    if [[ -n "$@" ]]; then
        du $arg -- "$@";
    else
        du $arg .[^.]* ./*;
    fi;
}

# Use Git’s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
    function diff() {
        git diff --no-index --color-words "$@";
    }
fi;

# Create a data URL from a file
function dataurl() {
    local mimeType=$(file -b --mime-type "$1");
    if [[ $mimeType == text/* ]]; then
        mimeType="${mimeType};charset=utf-8";
    fi
    echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Create a git.io short URL
function gitio() {
    if [ -z "${1}" -o -z "${2}" ]; then
        echo "Usage: \`gitio slug url\`";
        return 1;
    fi;
    curl -i https://git.io/ -F "url=${2}" -F "code=${1}";
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
    local port="${1:-4000}";
    local ip=$(ipconfig getifaddr en1);
    sleep 1 && open "http://${ip}:${port}/" &
    php -S "${ip}:${port}";
}

# Compare original and gzipped file size
function gz() {
    local origsize=$(wc -c < "$1");
    local gzipsize=$(gzip -c "$1" | wc -c);
    local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
    printf "orig: %d bytes\n" "$origsize";
    printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
    if [ -t 0 ]; then # argument
        python -mjson.tool <<< "$*" | pygmentize -l javascript;
    else # pipe
        python -mjson.tool | pygmentize -l javascript;
    fi;
}

# Run `dig` and display the most useful info
function digga() {
    dig +nocmd "$1" any +multiline +noall +answer;
}

# UTF-8-encode a string of Unicode symbols
function escape() {
    printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u);
    # print a newline unless we’re piping the output to another program
    if [ -t 1 ]; then
        echo ""; # newline
    fi;
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
    perl -e "binmode(STDOUT, ':utf8'); print \"$@\"";
    # print a newline unless we’re piping the output to another program
    if [ -t 1 ]; then
        echo ""; # newline
    fi;
}

# Get a character’s Unicode code point
function codepoint() {
    perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))";
    # print a newline unless we’re piping the output to another program
    if [ -t 1 ]; then
        echo ""; # newline
    fi;
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
    if [ -z "${1}" ]; then
        echo "ERROR: No domain specified.";
        return 1;
    fi;

    local domain="${1}";
    echo "Testing ${domain}…";
    echo ""; # newline

    local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
        | openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

    if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
        local certText=$(echo "${tmp}" \
            | openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
            no_serial, no_sigdump, no_signame, no_validity, no_version");
        echo "Common Name:";
        echo ""; # newline
        echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
        echo ""; # newline
        echo "Subject Alternative Name(s):";
        echo ""; # newline
        echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
            | sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
        return 0;
    else
        echo "ERROR: Certificate not found.";
        return 1;
    fi;
}

# `m` with no arguments opens the current directory, otherwise opens the given
# location
function m() {
    if [ $# -eq 0 ]; then
        mate .;
    else
        mate "$@";
    fi;
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
    if [ $# -eq 0 ]; then
        open .;
    else
        open "$@";
    fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
    tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# This is use to upgrade many of the command line tools we'll add.
# Usage: update
function update() {
    if [[ $(id -u) -eq 0 ]]; then
        echo "The command \"update\" should not be executed as root or via sudo directly."
        echo "When a service requires root access, you will be prompted for a password as needed."
        exit 1
    fi    
    
    echo "Updating MacOS..."
    sudo softwareupdate -i -a;
    badge
        
    echo "Updating brew installs..."
		
    brew -v update
    badge
  	brew upgrade
    badge
    brew cask upgrade 
    badge
    brew cleanup
    badge
    brew prune 
    badge
    brew doctor    
    brew services restart memcached    
    badge
    brew services restart mysql
    badge
    brew services restart redis
    badge

    echo "Updating PHP installs..."

    badge
	sudo pear channel-update pear.php.net
	sudo pear channel-updatepeck.php.net
    sudo pear upgrade PEAR
    sudo pear upgrade-all
    sudo pecl upgrade-all
	
    badge
	wget -O pdepend.phar http://static.pdepend.org/php/latest/pdepend.phar
	chmod +x pdepend.phar
	mv -f pdepend.phar /usr/local/bin/pdepend

	wget -O phing.phar https://www.phing.info/get/phing-latest.phar
	chmod +x phing.phar
	mv -f phing.phar /usr/local/bin/phing

	wget -O phpcpd.phar https://phar.phpunit.de/phpcpd.phar
	chmod +x phpcpd.phar
	mv -f phpcpd.phar /usr/local/bin/phpcpd

	wget -O phpdox.phar http://phpdox.de/releases/phpdox.phar
	chmod +x phpdox.phar
	mv phpdox.phar /usr/local/bin/phpdox

	wget -O phploc.phar https://phar.phpunit.de/phploc.phar 
	chmod +x phploc.phar 
	mv phploc.phar /usr/local/bin/phploc 

	wget -O phpmd.phar -c http://static.phpmd.org/php/latest/phpmd.phar
	chmod +x phpmd.phar 
	mv phpmd.phar /usr/local/bin/phpmd 

	wget -O phpunit-skelgen.phar https://phar.phpunit.de/phpunit-skelgen.phar
	chmod +x phpunit-skelgen.phar
	mv phpunit-skelgen.phar /usr/local/bin/phpunit-skelgen
	
    echo "Updating composer global..."
    composer global update
    badge
    echo "Updating Gems..."
    sudo gem update --system
    badge
    sudo gem update --no-document
    badge
    sudo gem cleanup    
    badge
    echo "Updating npm..."
    npm install npm -g 
    badge
    npm-check -g -u
    badge
    npm update -g
    badge
    echo "Updating Exakat..."
    php ${PRJ_DIR}/tools/exakat.phar upgrade -u
    badge
    echo "Updating Pip3..."
    pip3 install --upgrade hashpumpy pip hashpumpy setuptools six wheel detect-secrets
    badge
    
}
 
# Defining a default project
# Usage: devenv 'project directory' one or many of 'php{version}' 'sf{version}' 'ezp'
function devenv() {
    if [[ $(id -u) -eq 0 ]]; then
        echo "The command \"devenv\" should not be executed as root or via sudo directly."
        echo "When a service requires root access, you will be prompted for a password as needed."
        exit 1
    fi    
    
	if [ -z "${1}" ]; then
        echo "ERROR: Directory location needed";
        return 1;
    fi;
	
	args=$#                          # number of command line args
    
    DEVENV_DIR="${1}"
    export DEVENV_DIR
    cd "${DEVENV_DIR}"
	
	DEVENV_NAME="none"
	DEVENV_PROG="donotrun"
	DEVENV_CACHE="none"
	DEVENV_LOG="none"
	
	for (( i=2; i<=$args; i+=1 ))    # loop from 2 to N (where N is number of args)
	do
		echo "SETTING ${!i}"
 	    if [ "${!i}" == 'sf4' ]; then
			echo "SET ${!i}"
	        DEVENV_NAME="sf4"
			DEVENV_PROG="php -d memory_limit=-1 ${DEVENV_DIR}/bin/console"
	        DEVENV_CACHE="$DEVENV_DIR/var/cache/"
	        DEVENV_LOG="$PDEVENV_DIR/var/logs/"
	    fi		
 	    if [ "${!i}" == 'sf5' ]; then
			echo "SET ${!i}"
	        DEVENV_NAME="sf5"
			DEVENV_PROG="php -d memory_limit=-1 ${DEVENV_DIR}/bin/console"
	        DEVENV_CACHE="$DEVENV_DIR/var/cache/"
	        DEVENV_LOG="$PDEVENV_DIR/var/logs/"
	    fi		
 	    if [ "${!i}" == 'sf6' ]; then
			echo "SET ${!i}"
	        DEVENV_NAME="sf6"
			DEVENV_PROG="php -d memory_limit=-1 ${DEVENV_DIR}/bin/console"
	        DEVENV_CACHE="$DEVENV_DIR/var/cache/"
	        DEVENV_LOG="$PDEVENV_DIR/var/logs/"
	    fi		
# 	    if [ "${!i}" == 'php80' ]; then
#			echo "SET ${!i}"
#			sphp 8.0
#	    fi		
#	    if [ "${!i}" == 'php74' ]; then
#			echo "SET ${!i}"
#			sphp 7.4
#	    fi		
# 	    if [ "${!i}" == 'php73' ]; then
#			echo "SET ${!i}"
#			sphp 7.3
#	    fi		
 	    if [ "${!i}" == 'java8' ]; then
			echo "SET ${!i}"
			java8
	    fi		
 	    if [ "${!i}" == 'java16' ]; then
			echo "SET ${!i}"
			java16
	    fi		

	done
    
    export DEVENV_NAME
    export DEVENV_PROG
    export DEVENV_CACHE
    export DEVENV_LOG
}

# This is use for symfony 1.x projects.
# If you are using many schema files, it will add a list of all files to your schema.yml
# Usage: sfschema
function sfschema() {
    cd ${DEVENV_DIR}
    cd config/doctrine/
    echo
    for i in $(ls *.yml)
    do
        echo "##### $i #####"; grep -v '^ ' $i | grep -v '^$' | grep -v '^#' | sed 's/://g' | sed 's/^/# /g'
        echo
    done >> schema.yml
}

function sfvar() {
    cd ${DEVENV_DIR}
    rm -rf var/cache/*
    rm -rf var/logs/*

    HTTPDUSER=`ps axo user,comm | grep -E '[a]pache|[h]ttpd|[_]www|[w]ww-data|[n]ginx|demon' | grep -v root | head -1 | cut -d\  -f1`
    sudo /bin/chmod -R +a "$HTTPDUSER allow delete,write,append,file_inherit,directory_inherit" var
    sudo /bin/chmod -R +a "`whoami` allow delete,write,append,file_inherit,directory_inherit" var
}

function donotrun() {
    if [[ $(id -u) -eq 0 ]]; then
        echo "The command \"sf\" should not be executed as root or via sudo directly."
        echo "When a service requires root access, you will be prompted for a password as needed."
        exit 0
    fi    

    echo "The command \"sf\" should not be executed without an DEVENV_PROG."
    echo "You can do this by running gosf"
    exit 0
}

# Extract archives - use: extract <file>
# Based on http://dotfiles.org/~pseup/.bashrc
function extract() {
    if [ -f "$1" ] ; then
        local filename=$(basename "$1")
        local foldername="${filename%%.*}"
        local fullpath=`perl -e 'use Cwd "abs_path";print abs_path(shift)' "$1"`
        local didfolderexist=false
        if [ -d "$foldername" ]; then
            didfolderexist=true
            read -p "$foldername already exists, do you want to overwrite it? (y/n) " -n 1
            echo
            if [[ $REPLY =~ ^[Nn]$ ]]; then
                return
            fi
        fi
        mkdir -p "$foldername" && cd "$foldername"
        case $1 in
            *.tar.bz2) tar xjf "$fullpath" ;;
            *.tar.gz) tar xzf "$fullpath" ;;
            *.tar.xz) tar Jxvf "$fullpath" ;;
            *.tar.Z) tar xzf "$fullpath" ;;
            *.tar) tar xf "$fullpath" ;;
            *.taz) tar xzf "$fullpath" ;;
            *.tb2) tar xjf "$fullpath" ;;
            *.tbz) tar xjf "$fullpath" ;;
            *.tbz2) tar xjf "$fullpath" ;;
            *.tgz) tar xzf "$fullpath" ;;
            *.txz) tar Jxvf "$fullpath" ;;
            *.zip) unzip "$fullpath" ;;
            *) echo "'$1' cannot be extracted via extract()" && cd .. && ! $didfolderexist && rm -r "$foldername" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# animated gifs from any video
# from alex sexton   gist.github.com/SlexAxton/4989674
function gifify() {
  if [[ -n "$1" ]]; then
    if [[ $2 == '--good' ]]; then
      ffmpeg -i "$1" -r 10 -vcodec png out-static-%05d.png
      time convert -verbose +dither -layers Optimize -resize 900x900\> out-static*.png  GIF:- | gifsicle --colors 128 --delay=5 --loop --optimize=3 --multifile - > "$1.gif"
      rm out-static*.png
    else
      ffmpeg -i "$1" -s 600x400 -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 > "$1.gif"
    fi
  else
    echo "proper usage: gifify <input_movie.mov>. You DO need to include extension."
  fi
}

# base on : https://gist.github.com/rhukster/073a2c1270ccb2c6868e7aced92001cf
# @author   Djamil Legato http://github.com/w00fz/xdebug-osx
# @modified Andy Miller - Homebrew/core compatibility
# @license  MIT
# @version  1.2
function xdebug-toggle() {
	app="$(basename "$0")"
	command="$1"
	options="$2"

	php_version_dot=$(php -r "\$v=explode('.', phpversion() ); echo implode('.', array_splice(\$v, 0, -1));")
	php_version="${php_version_dot//./}"

	xdebug_conf_path="$(brew --prefix)/etc/php/$php_version_dot/conf.d"
	xdebug_conf_file="ext-xdebug.ini"
	xdebug_conf=$xdebug_conf_path/$xdebug_conf_file
	function keg_exists() { brew list php"${php_version}"-xdebug 2> /dev/null > /dev/null; }

	if keg_exists; then
	    if [ ! -f "$xdebug_conf" ] && [ ! -f "$xdebug_conf.disabled" ]; then
	        echo ""
	        echo "The ini file for Xdebug was not found at '$xdebug_conf_path'"
	        echo "Did you install Xdebug via Homebrew?"
	        echo "For more informations: http://github.com/w00fz/xdebug-osx/blob/master/README.md"
	        echo ""

	        exit 1
	    else
	        STATUS="enabled"
	        IS_PHP_FPM=false
	        SERVER_NAME="apache"

	        if [ -f "$xdebug_conf" ] && [ -f "$xdebug_conf.disabled" ]; then
	            echo ""
	            echo "Detected both enabled and disabled Xdebug ini files. Deleting the disabled one."
	            echo ""

	            rm -rf "$xdebug_conf.disabled"
	            STATUS="enabled"
	        elif [ -f "$xdebug_conf.disabled" ]; then
	            STATUS="disabled"
	        fi

	        if [ $# -ge 1 ] && [ "$command" == "on" ] || [ "$command" == "off" ]; then
	            if [ "$command" == "on" ]; then
	                mv "$xdebug_conf.disabled" "$xdebug_conf" 2> /dev/null
	                STATUS="enabled"
	            elif [ "$command" == "off" ]; then
	                mv "$xdebug_conf" "$xdebug_conf.disabled" 2> /dev/null
	                STATUS="disabled"
	            fi

	            if [ -f ~/Library/LaunchAgents/homebrew.mxcl.php"${php_version}".plist ]; then
	                IS_PHP_FPM=true
	                SERVER_NAME="php-fpm"
	            fi

	            if [ "$options" == '--no-server-restart' ]; then
	                echo ""
	                echo "Xdebug has been $STATUS. Will not restart $SERVER_NAME"
	            else
	                if [ "$IS_PHP_FPM" == true ]; then
	                    echo ""
	                    echo "Xdebug has been $STATUS, restarting $SERVER_NAME"

	                    brew services restart php"${php_version}"
	                else
	                    echo ""
	                    echo "Xdebug has been $STATUS, restarting $SERVER_NAME (it might ask for your password)"

	                    sudo pkill -9 httpd
	                    sudo apachectl -k restart > /dev/null 2>&1
	                fi
	            fi
	        else
	            echo ""
	            echo "Usage: ${app} <on | off> [--no-server-restart]"
	        fi

	        echo ""
	        echo "You are running PHP v$php_version_dot with Xdebug $STATUS"
	        echo ""
	    fi
	else
	    echo ""
	    echo "Xdebug for PHP $php_version_dot was never installed or not installed via Brew."
	    echo "For more informations: http://github.com/w00fz/xdebug-osx/blob/master/README.md"
	    echo ""
	    exit 1
	fi
}

#function sphp() {
	# Base on Phil Cook : phpswitch.sh
	# Creator: Phil Cook
	# Email: phil@phil-cook.com
	# Twitter: @p_cook
#	osx_major_version=$(sw_vers -productVersion | cut -d. -f1)
#	osx_minor_version=$(sw_vers -productVersion | cut -d. -f2)
#	osx_patch_version=$(sw_vers -productVersion | cut -d. -f3)
#    osx_version=$((${osx_major_version} * 10000 + ${osx_minor_version} * 100 + ${osx_patch_version:-0}))
#
#	brew_prefix=$(brew --prefix | sed 's#/#\\\/#g')
#
#	brew_array=("7.2","7.3","7.4","8.0")
#	php_array=("php@7.2" "php@7.3" "php@7.4" "php@8.0")
#	php_installed_array=()
#	php_version="php@$1"
#	php_opt_path="$brew_prefix\/opt\/"
#
#	# Has the user submitted a version required
#	if [[ -z "$1" ]]; then
#	    echo "usage: sphp version [-s|-s=*] [-c=*]"
#	    echo
#	    echo "    version    one of:" ${brew_array[@]}
#	    echo
#	    exit
#	fi
#	
#	# What versions of php are installed via brew
#	for i in ${php_array[*]}; do
#	    if [[ -n "$(brew ls --versions "$i")" ]]; then
#	        php_installed_array+=("$i")
#	    fi
#	done
#	
#	# Check that the requested version is supported
#	if [[ " ${php_array[*]} " == *"$php_version"* ]]; then
#	    # Check that the requested version is installed
#	    if [[ " ${php_installed_array[*]} " == *"$php_version"* ]]; then
#
#	        # Switch Shell
#	        echo "Switching to $php_version"
#	        echo "Switching your shell"
#	        for i in ${php_installed_array[@]}; do
#	            brew unlink $i
#	        done
#	        brew link --force "$php_version"
#			
#			echo ""
#	        php -v
#	        echo ""
#
#	        echo "All done!"
#	    else
#	        echo "Sorry, but $php_version is not installed via brew. Install by running: brew install $php_version"
#	    fi
#	else
#	    echo "Unknown version of PHP. SPHP can only handle arguments of:" ${brew_array[@]}
#	fi
#}
