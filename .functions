#!/usr/bin/env bash

# Create a new directory and enter it
function mkcd() {
    mkdir -p "$@" && cd "$_";
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
    cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
    local tmpFile="${@%/}.tar";
    tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

    size=$(
        stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
        stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
    );

    local cmd="";
    if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
        # the .tar file is smaller than 50 MB and Zopfli is available; use it
        cmd="zopfli";
    else
        if hash pigz 2> /dev/null; then
            cmd="pigz";
        else
            cmd="gzip";
        fi;
    fi;

    echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…";
    "${cmd}" -v "${tmpFile}" || return 1;
    [ -f "${tmpFile}" ] && rm "${tmpFile}";

    zippedSize=$(
        stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
        stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
    );

    echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

# Determine size of a file or total size of a directory
function fs() {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh;
    else
        local arg=-sh;
    fi
    if [[ -n "$@" ]]; then
        du $arg -- "$@";
    else
        du $arg .[^.]* ./*;
    fi;
}

# Use Git’s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
    function diff() {
        git diff --no-index --color-words "$@";
    }
fi;

# Create a data URL from a file
function dataurl() {
    local mimeType=$(file -b --mime-type "$1");
    if [[ $mimeType == text/* ]]; then
        mimeType="${mimeType};charset=utf-8";
    fi
    echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Create a git.io short URL
function gitio() {
    if [ -z "${1}" -o -z "${2}" ]; then
        echo "Usage: \`gitio slug url\`";
        return 1;
    fi;
    curl -i https://git.io/ -F "url=${2}" -F "code=${1}";
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
    local port="${1:-4000}";
    local ip=$(ipconfig getifaddr en1);
    sleep 1 && open "http://${ip}:${port}/" &
    php -S "${ip}:${port}";
}

# Compare original and gzipped file size
function gz() {
    local origsize=$(wc -c < "$1");
    local gzipsize=$(gzip -c "$1" | wc -c);
    local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
    printf "orig: %d bytes\n" "$origsize";
    printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
    if [ -t 0 ]; then # argument
        python -mjson.tool <<< "$*" | pygmentize -l javascript;
    else # pipe
        python -mjson.tool | pygmentize -l javascript;
    fi;
}

# Run `dig` and display the most useful info
function digga() {
    dig +nocmd "$1" any +multiline +noall +answer;
}

# UTF-8-encode a string of Unicode symbols
function escape() {
    printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u);
    # print a newline unless we’re piping the output to another program
    if [ -t 1 ]; then
        echo ""; # newline
    fi;
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
    perl -e "binmode(STDOUT, ':utf8'); print \"$@\"";
    # print a newline unless we’re piping the output to another program
    if [ -t 1 ]; then
        echo ""; # newline
    fi;
}

# Get a character’s Unicode code point
function codepoint() {
    perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))";
    # print a newline unless we’re piping the output to another program
    if [ -t 1 ]; then
        echo ""; # newline
    fi;
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
    if [ -z "${1}" ]; then
        echo "ERROR: No domain specified.";
        return 1;
    fi;

    local domain="${1}";
    echo "Testing ${domain}…";
    echo ""; # newline

    local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
        | openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

    if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
        local certText=$(echo "${tmp}" \
            | openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
            no_serial, no_sigdump, no_signame, no_validity, no_version");
        echo "Common Name:";
        echo ""; # newline
        echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
        echo ""; # newline
        echo "Subject Alternative Name(s):";
        echo ""; # newline
        echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
            | sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
        return 0;
    else
        echo "ERROR: Certificate not found.";
        return 1;
    fi;
}

# `m` with no arguments opens the current directory, otherwise opens the given
# location
function m() {
    if [ $# -eq 0 ]; then
        mate .;
    else
        mate "$@";
    fi;
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
    if [ $# -eq 0 ]; then
        open .;
    else
        open "$@";
    fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
    tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# This is use to upgrade many of the command line tools we'll add.
# Usage: update
update() {
    if [[ $(id -u) -eq 0 ]]; then
        echo "The command \"update\" should not be executed as root or via sudo directly."
        echo "When a service requires root access, you will be prompted for a password as needed."
        exit 1
    fi    
    
    echo "Updating MacOS..."
    sudo softwareupdate -i -a;
    badge
        
    echo "Updating brew installs..."
    brew unlink php$PHP_VERSION 2> /dev/null > /dev/null
    brew -v update
    badge
    brew upgrade --force-bottle --cleanup
    badge
    brew upgrade brew-cask
    badge
    brew cleanup
    badge
    brew cask cleanup;
    badge
    brew prune 
    badge
    brew doctor
    badge
    npm-check -g -u
    
    brew link php$PHP_VERSION 2> /dev/null > /dev/null
    brew services restart memcached    
    badge
    brew services restart mysql
    badge
    brew services restart redis
    badge
#    echo "Updating PEAR and PECL..."
#    sudo pear upgrade PEAR
#    sudo pear upgrade-all
#    sudo pecl upgrade-all
    echo "Updating composer global..."
    composer global update
    badge
    echo "Updating Gems..."
    sudo gem update --system
    badge
    sudo gem update --no-document
    badge
    sudo gem cleanup    
    badge
    echo "Updating npm..."
    npm install npm -g 
    badge
    npm update -g
    badge
    echo "Updating Exakat..."
    exakat upgrade -u
    badge
}
 
# Defining a default project
# Usage: gosf 'project directory' 'php version' 'symfony version' 'project configuration name in apache'
gosf() {
    if [[ $(id -u) -eq 0 ]]; then
        echo "The command \"gosf\" should not be executed as root or via sudo directly."
        echo "When a service requires root access, you will be prompted for a password as needed."
        exit 1
    fi    
    
    PRJ_SF="${1}"
    export PRJ_SF

    if [ "$2" != "" && "$2" != "none" && ${PHP_VERSION} != "$2"]
    then
        sphp ${2}
    fi

    if [ "$3" == 'sf3' ]
    then
        DEV_ENV="sf3"
        SF_PROG="php $PRJ_SF/bin/console"
        SF_CACHE="$PRJ_SF/var/cache/"
        SF_LOG="$PRJ_SF/var/logs/"
    elif [ "$3" == 'sf2' ]
    then
        DEV_ENV="sf2"
        SF_PROG="php $PRJ_SF/app/console"
        SF_CACHE="$PRJ_SF/app/cache/"
        SF_LOG="$PRJ_SF/app/logs/"
    elif [ "$3" == 'sf1' ]
    then
        DEV_ENV="sf1"
        SF_PROG="$PRJ_SF/symfony"
        SF_CACHE="$PRJ_SF/cache/"
        SF_LOG="$PRJ_SF/log/"
    else
        DEV_ENV="none"
        SF_PROG="donotrun"
        SF_CACHE="none"
        SF_LOG="none"
    fi
    export DEV_ENV
    export SF_PROG
    export SF_CACHE
    export SF_LOG

    cd "${1}"

 
    # if [[ "$3" != "" && "$3" != "none" ]]
    # then
    #     for i in /etc/apache2/other/*.default
    #     do
    #         sudo mv $i ${i%default}conf
    #     done
    #     sudo cp /etc/apache2/other/"${3}".conf /etc/apache2/other/000.default.conf
    #     sudo mv /etc/apache2/other/"${3}".conf /etc/apache2/other/"${3}".default
    #     apachectl restart
    # fi
}
# This is use for symfony 1.x projects.
# If you are using many schema files, it will add a list of all files to your schema.yml
# Usage: sfschema
sfschema() {
    cd ${PRJ_SF}
    cd config/doctrine/
    echo
    for i in $(ls *.yml)
    do
        echo "##### $i #####"; grep -v '^ ' $i | grep -v '^$' | grep -v '^#' | sed 's/://g' | sed 's/^/# /g'
        echo
    done >> schema.yml
}

donotrun() {
    if [[ $(id -u) -eq 0 ]]; then
        echo "The command \"sf\" should not be executed as root or via sudo directly."
        echo "When a service requires root access, you will be prompted for a password as needed."
        exit 1
    fi    

    echo "The command \"sf\" should not be executed without an DEV_ENV."
    echo "You can do this by running gosf"
    exit 1
}

# Switch between PHP version. Will restart Apache
# base on : https://github.com/sgotre/sphp-osx/blob/master/sphp
# Usage: sphp [phpversion]
sphp() {
    if [[ $(id -u) -eq 0 ]]; then
        echo "The command \"sphp\" should not be executed as root or via sudo directly."
        echo "When a service requires root access, you will be prompted for a password as needed."
        exit 1
    fi
    
    # Usage
    if [ $# -ne 1 ]; then
        echo "Usage: sphp [phpversion]"
        echo "Versions installed:"
        brew list | grep '^php[0-9]\{2,\}$' | grep -o -E '[0-9]+' | while read -r line ; do
            echo " - phpversion: $line"
            # your code goes here
        done
        exit 1
    fi

    newversion="$1"

    majorOld=${PHP_VERSION:0:1}
    majorNew=${newversion:0:1}
    minorNew=${newversion:1:1}

    brew list php$newversion 2> /dev/null > /dev/null
    
    if [ $? -eq 0 ]; then
        echo "PHP version $newversion found"
        
        # Check if new version is already the current version.
        if [ "${newversion}" == "${PHP_VERSION}" ]; then
            echo -n "PHP version ${newversion} is already being used. Continue by reloading? (y/n) "
            while true; do
                read -n 1 yn
                case $yn in
                    [Yy]* ) echo && break;;
                    [Nn]* ) echo && exit 1;;
                esac
            done
        fi
        
        echo "Unlinking old binaries..."
        brew unlink php$PHP_VERSION 2> /dev/null > /dev/null
        
        echo "Linking new binaries..."
        brew link php$newversion

        echo "Linking new modphp addon..."
        sudo ln -sf `brew list php$newversion | grep libphp` /usr/local/lib/libphp${majorNew}.so

        echo "Fixing LoadModule..."
        apacheConf=`httpd -V | grep -i server_config_file | cut -d '"' -f 2`
        sudo sed -i -e "/LoadModule php${majorOld}_module/s/^#*/#/" $apacheConf
        sudo sed -i -e "/LoadModule php${majorNew}_module/s/^#//" $apacheConf

        echo "Updating version file..."
        export PHP_VERSION="${newversion}"

        echo "Restarting system Apache..."
        apachectl -k restart > /dev/null 2>&1
        echo "Done."
    else
        echo "PHP version $majorNew.$minorNew was not found."
        echo "Try \`brew install php${newversion}\` first."
        exit 1
    fi
}

# Extract archives - use: extract <file>
# Based on http://dotfiles.org/~pseup/.bashrc
function extract() {
    if [ -f "$1" ] ; then
        local filename=$(basename "$1")
        local foldername="${filename%%.*}"
        local fullpath=`perl -e 'use Cwd "abs_path";print abs_path(shift)' "$1"`
        local didfolderexist=false
        if [ -d "$foldername" ]; then
            didfolderexist=true
            read -p "$foldername already exists, do you want to overwrite it? (y/n) " -n 1
            echo
            if [[ $REPLY =~ ^[Nn]$ ]]; then
                return
            fi
        fi
        mkdir -p "$foldername" && cd "$foldername"
        case $1 in
            *.tar.bz2) tar xjf "$fullpath" ;;
            *.tar.gz) tar xzf "$fullpath" ;;
            *.tar.xz) tar Jxvf "$fullpath" ;;
            *.tar.Z) tar xzf "$fullpath" ;;
            *.tar) tar xf "$fullpath" ;;
            *.taz) tar xzf "$fullpath" ;;
            *.tb2) tar xjf "$fullpath" ;;
            *.tbz) tar xjf "$fullpath" ;;
            *.tbz2) tar xjf "$fullpath" ;;
            *.tgz) tar xzf "$fullpath" ;;
            *.txz) tar Jxvf "$fullpath" ;;
            *.zip) unzip "$fullpath" ;;
            *) echo "'$1' cannot be extracted via extract()" && cd .. && ! $didfolderexist && rm -r "$foldername" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# animated gifs from any video
# from alex sexton   gist.github.com/SlexAxton/4989674
gifify() {
  if [[ -n "$1" ]]; then
    if [[ $2 == '--good' ]]; then
      ffmpeg -i "$1" -r 10 -vcodec png out-static-%05d.png
      time convert -verbose +dither -layers Optimize -resize 900x900\> out-static*.png  GIF:- | gifsicle --colors 128 --delay=5 --loop --optimize=3 --multifile - > "$1.gif"
      rm out-static*.png
    else
      ffmpeg -i "$1" -s 600x400 -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 > "$1.gif"
    fi
  else
    echo "proper usage: gifify <input_movie.mov>. You DO need to include extension."
  fi
}