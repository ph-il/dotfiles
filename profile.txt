##### local variable #####
 
# Please change if you're using an other directory for Projects
export PRJ_DIR="${HOME}/Projects"

##### Environment variables #####
 
export PHP_AUTOCONF=/usr/local/Cellar/autoconf/2.69/bin/autoconf
export EDITOR="/usr/local/bin/mate -w"
export DEV_ENV="NONE"

export PATH="$(brew --prefix)/bin:$(brew --prefix)/sbin:$PATH:/Users/$(whoami)/bin"

export JAVA_HOME=$(/usr/libexec/java_home) 
export NEO4J_HOME="${PRJ_DIR}/tools/exakat/neo4j"

 

 
# Functions replacing external scripts
# This is use to upgrade many of the command line tools we'll add.
# Usage: update
update() {
    if [[ $(id -u) -eq 0 ]]; then
        echo "The command \"update\" should not be executed as root or via sudo directly."
        echo "When a service requires root access, you will be prompted for a password as needed."
        exit 1
    fi    
    
    echo "Updating MacOS..."
	sudo softwareupdate -i -a;
	badge
		
    echo "Updating brew installs..."
    currentversion="`php -r \"error_reporting(0); echo str_replace('.', '', substr(phpversion(), 0, 3));\"`"
    brew unlink php$currentversion 2> /dev/null > /dev/null
    brew update
	badge
    brew upgrade
	badge
	brew cleanup;
	badge
    brew link php$currentversion 2> /dev/null > /dev/null
    brew services restart memcached    
	badge
    brew services restart mysql
	badge
    brew services restart redis
	badge
#    echo "Updating PEAR and PECL..."
#    sudo pear upgrade PEAR
#    sudo pear upgrade-all
#    sudo pecl upgrade-all
    echo "Updating composer global..."
    composer global update
	badge
    echo "Updating Gems..."
	sudo gem update --system
	badge
	sudo gem update
	badge
	sudo gem cleanup'	
	badge
    echo "Updating npm..."
	npm install npm -g 
	badge
	npm update -g
	badge
    echo "Updating Exakat..."
	exakat upgrade -u
	badge
}
 
# Defining a default project
# Usage: gosf 'project directory' 'php version' 'symfony version' 'project configuration name in apache'
gosf() {
    if [[ $(id -u) -eq 0 ]]; then
        echo "The command \"gosf\" should not be executed as root or via sudo directly."
        echo "When a service requires root access, you will be prompted for a password as needed."
        exit 1
    fi    
    
    PRJ_SF="${1}"
    export PRJ_SF

    if [[ "$2" != "" && "$2" != "none" ]]
    then
        sphp ${2}
    fi

    if [ "$3" == 3 ]
    then
        SF_PROG="php $PRJ_SF/bin/console"
        SF_CACHE="$PRJ_SF/var/cache/"
        SF_LOG="$PRJ_SF/var/logs/"
    elif [ "$3" == 2 ]
    then
        SF_PROG="php $PRJ_SF/app/console"
        SF_CACHE="$PRJ_SF/app/cache/"
        SF_LOG="$PRJ_SF/app/logs/"
    else
        SF_PROG="$PRJ_SF/symfony"
        SF_CACHE="$PRJ_SF/cache/"
        SF_LOG="$PRJ_SF/log/"
    fi
    export SF_PROG
    export SF_CACHE
    export SF_LOG

    cd "${1}"

 
    # if [[ "$3" != "" && "$3" != "none" ]]
    # then
    #     for i in /etc/apache2/other/*.default
    #     do
    #         sudo mv $i ${i%default}conf
    #     done
    #     sudo cp /etc/apache2/other/"${3}".conf /etc/apache2/other/000.default.conf
    #     sudo mv /etc/apache2/other/"${3}".conf /etc/apache2/other/"${3}".default
    #     apachectl restart
    # fi
}
# This is use for symfony 1.x projects.
# If you are using many schema files, it will add a list of all files to your schema.yml
# Usage: sfschema
sfschema() {
    cd ${PRJ_SF}
    cd config/doctrine/
    echo
    for i in $(ls *.yml)
    do
        echo "##### $i #####"; grep -v '^ ' $i | grep -v '^$' | grep -v '^#' | sed 's/://g' | sed 's/^/# /g'
        echo
    done >> schema.yml
}

# Switch between PHP version. Will restart Apache
# base on : https://github.com/sgotre/sphp-osx/blob/master/sphp
# Usage: sphp [phpversion]
sphp() {
    if [[ $(id -u) -eq 0 ]]; then
        echo "The command \"sphp\" should not be executed as root or via sudo directly."
        echo "When a service requires root access, you will be prompted for a password as needed."
        exit 1
    fi
    
    # Usage
    if [ $# -ne 1 ]; then
        echo "Usage: sphp [phpversion]"
        echo "Versions installed:"
        brew list | grep '^php[0-9]\{2,\}$' | grep -o -E '[0-9]+' | while read -r line ; do
            echo " - phpversion: $line"
            # your code goes here
        done
        exit 1
    fi

    currentversion="`php -r \"error_reporting(0); echo str_replace('.', '', substr(phpversion(), 0, 3));\"`"
    newversion="$1"

    majorOld=${currentversion:0:1}
    majorNew=${newversion:0:1}
    minorNew=${newversion:1:1}

    brew list php$newversion 2> /dev/null > /dev/null
    
    if [ $? -eq 0 ]; then
        echo "PHP version $newversion found"
        
        # Check if new version is already the current version.
        if [ "${newversion}" == "${currentversion}" ]; then
            echo -n "PHP version ${newversion} is already being used. Continue by reloading? (y/n) "
            while true; do
                read -n 1 yn
                case $yn in
                    [Yy]* ) echo && break;;
                    [Nn]* ) echo && exit 0;;
                esac
            done
        fi
        
        echo "Unlinking old binaries..."
        brew unlink php$currentversion 2> /dev/null > /dev/null
        
        echo "Linking new binaries..."
        brew link php$newversion

        echo "Linking new modphp addon..."
        sudo ln -sf `brew list php$newversion | grep libphp` /usr/local/lib/libphp${majorNew}.so

        echo "Fixing LoadModule..."
        apacheConf=`httpd -V | grep -i server_config_file | cut -d '"' -f 2`
        sudo sed -i -e "/LoadModule php${majorOld}_module/s/^#*/#/" $apacheConf
        sudo sed -i -e "/LoadModule php${majorNew}_module/s/^#//" $apacheConf

        echo "Updating version file..."

        echo "Restarting system Apache..."
        apachectl -k restart > /dev/null 2>&1
        echo "Done."
    else
        echo "PHP version $majorNew.$minorNew was not found."
        echo "Try \`brew install php${newversion}\` first."
        exit 1
    fi
}

if which rbenv > /dev/null; then 
    eval "$(rbenv init -)"; 
fi

# Include ~/.bashrc for personal aliases
if [ -f $HOME/.bashrc ]; then
    source $HOME/.bashrc
fi
